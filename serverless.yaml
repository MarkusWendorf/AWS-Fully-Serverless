service: Test

provider:
  name: aws
  region: eu-central-1

resources:
  Resources:
    WebsiteBucketS3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(./config.json):BucketS3}
        AccessControl: PublicRead

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${file(./config.json):BucketS3}
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - ${file(./config.json):BucketS3}
                    - "/*"
              Principal: "*"

    CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
          DistributionConfig:
            Enabled: True
            Aliases:
              - ${file(./config.json):Domain}
            DefaultRootObject: index.html
            ViewerCertificate:
              AcmCertificateArn: ${file(./config.json):AcmCertArn}
              SslSupportMethod: sni-only
            DefaultCacheBehavior:
              TargetOriginId: primaryOrigin
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
              ForwardedValues:
                QueryString: false
            CustomErrorResponses:
              - ErrorCachingMinTTL: 604800
                ErrorCode: 403
                ResponseCode: 200
                ResponsePagePath: /index.html
              - ErrorCachingMinTTL: 604800
                ErrorCode: 404
                ResponseCode: 200
                ResponsePagePath: /index.html
            Origins:
              - Id: primaryOrigin
                DomainName:
                  Fn::GetAtt:
                    - WebsiteBucketS3
                    - DomainName
                S3OriginConfig: {}

    Route53Config:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${file(./config.json):HostedZoneRoute53}
        RecordSets:
          - Name: ${file(./config.json):Domain}
            Type: A
            AliasTarget:
              DNSName:
                Fn::GetAtt:
                  - CloudFrontDistribution
                  - DomainName
              HostedZoneId: Z2FDTNDATAQYW2

    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${file(./config.json):TableDynamoDB}